{"ast":null,"code":"import React,{useRef,useEffect,useState}from'react';import socket from\"../socketConfig\";import firebase from'../firebase.js';import{Redirect}from'react-router-dom';function Vote(props){//   const [code, setCode] = useState(props.location.state.code);\n//   const [name, setName] = useState(props.location.state.name);\n//   const [pictures, setPictures] = useState([]);\n//   const [round, setRound] = useState(props.location.state.round);\n//   const [resultTime, setResultTime] = useState(false);\n//   const [groupSize, setGroupSize] = useState(props.location.state.groupSize);\n//   const [vote, setVote] = useState();\n//   const inputRef = useRef(null);\n//   const [word, setWord] = useState();\n//   const [time, setTime] = useState(20);\n//   useEffect(async() => {\n//     console.log(code);\n//     console.log(round);\n//     let numVotes = 0;\n//     socket.on(\"vote\", () => {\n//         numVotes ++;\n//         if (numVotes == groupSize) {\n//             setResultTime(true);\n//         }\n//     });\n//     const db = firebase.firestore();\n//     //await getWord();\n//     // db.collection(\"rooms\").where(\"code\", \"==\", code).get().then((querySnapshot) => {\n//     //     querySnapshot.docs.forEach((snapshot) => {\n//     //         snapshot.ref.collection(\"rounds\").where(\"round\", \"==\", round).get().then((querySnapshot) => {\n//     //             querySnapshot.docs.forEach((snapshot) => {\n//     //                 snapshot.ref.collection(\"pictures\").get().then((querySnapshot) => {\n//     //                     querySnapshot.docs.forEach((doc) => {\n//     //                         setPictures(pictures => pictures.concat(doc.data().dataURL));\n//     //                     });\n//     //                 });\n//     //             });\n//     //         });\n//     //     });\n//     // });\n//     const interval = setInterval(() => {\n//         setTime( time => time - 1);\n//         if (time == 0) {\n//             clearInterval(interval);\n//             setResultTime(true);\n//         }\n//     }, 1000);\n// }, []);\n//   const updateVote = (event) => {\n//       setVote({vote: event.target.value});\n//   }\n// //   const submitVote = () => {\n// //       let votedPicture = pictures[vote];\n// //       const db = firebase.firestore();\n// //       db.collection(\"rooms\").where(\"code\", \"==\", code).collection(\"rounds\").where(\"round\", \"==\", round).collection(\"pictures\").where(\"dataURL\", \"==\", votedPicture).update({\n// //           votes : firebase.firestore.FieldValue.increment(1)\n// //       }).then(() => {\n// //         db.collection(\"rooms\").where(\"code\", \"==\", code).collection(\"rounds\").where(\"round\", \"==\", round).collection(\"pictures\").where(\"dataURL\", \"==\", votedPicture).get().then((doc) => {\n// //             db.collection(\"rooms\").where(\"code\", \"==\", code).collection(\"players\").where(\"name\", \"==\", doc.data().artist).update({\n// //                 votes : firebase.firestore.FieldValue.increment(1)\n// //             }).then(() => {\n// //                 socket.emit(\"vote\", code);\n// //             });\n// //         });\n// //     });\n// // }\n// const getWord = async () => {\n//     const db = firebase.firestore();\n//     db.collection(\"rooms\").where(\"code\", \"==\", code).get().then((querySnapshot) => {\n//       querySnapshot.docs.forEach((snapshot) => {\n//         snapshot.ref.collection(\"rounds\").where(\"round\", \"==\", round).get().then((querySnapshot) => {\n//           querySnapshot.docs.forEach((snapshot) => {\n//               setWord(snapshot.data().word);\n//           });\n//       });\n//   });\n// });\n// }\n//   return (\n//     <div>\n//         <h1>{time}</h1>\n//         <h1>{word}</h1>\n//         {pictures.map((idx, picture) => {\n//             return (<div>\n//                         <img src={picture} id={picture}/>\n//                         <label htmlFor={picture}>{idx}</label>\n//                     </div>)\n//                         })}\n//         <input type=\"text\" id=\"vote\" onChange={updateVote} ref={inputRef}/>\n//         <button id=\"done\">Done1</button>\n//         {resultTime ? <Redirect to={{pathname: '/result', state: {code: code, name: name, groupSize: groupSize, round: round}}}/> : null }\n//     </div>\n//     );\n}export default Vote;","map":{"version":3,"sources":["/Users/jacklunceford/Desktop/quiplash_drawing_game/react-app/src/pages/vote.jsx"],"names":["React","useRef","useEffect","useState","socket","firebase","Redirect","Vote","props"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,SAAxB,CAAmCC,QAAnC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,OAASC,QAAT,KAAyB,kBAAzB,CAEA,QAASC,CAAAA,IAAT,CAAcC,KAAd,CAAqB,CAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CAED,cAAeD,CAAAA,IAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport socket from \"../socketConfig\";\nimport firebase from '../firebase.js';\nimport { Redirect } from 'react-router-dom';\n\nfunction Vote(props) {\n\n//   const [code, setCode] = useState(props.location.state.code);\n//   const [name, setName] = useState(props.location.state.name);\n//   const [pictures, setPictures] = useState([]);\n//   const [round, setRound] = useState(props.location.state.round);\n//   const [resultTime, setResultTime] = useState(false);\n//   const [groupSize, setGroupSize] = useState(props.location.state.groupSize);\n//   const [vote, setVote] = useState();\n//   const inputRef = useRef(null);\n//   const [word, setWord] = useState();\n//   const [time, setTime] = useState(20);\n\n//   useEffect(async() => {\n//     console.log(code);\n//     console.log(round);\n//     let numVotes = 0;\n//     socket.on(\"vote\", () => {\n//         numVotes ++;\n//         if (numVotes == groupSize) {\n//             setResultTime(true);\n//         }\n//     });\n//     const db = firebase.firestore();\n    \n//     //await getWord();\n//     // db.collection(\"rooms\").where(\"code\", \"==\", code).get().then((querySnapshot) => {\n//     //     querySnapshot.docs.forEach((snapshot) => {\n//     //         snapshot.ref.collection(\"rounds\").where(\"round\", \"==\", round).get().then((querySnapshot) => {\n//     //             querySnapshot.docs.forEach((snapshot) => {\n//     //                 snapshot.ref.collection(\"pictures\").get().then((querySnapshot) => {\n//     //                     querySnapshot.docs.forEach((doc) => {\n//     //                         setPictures(pictures => pictures.concat(doc.data().dataURL));\n//     //                     });\n//     //                 });\n//     //             });\n//     //         });\n//     //     });\n//     // });\n    \n//     const interval = setInterval(() => {\n//         setTime( time => time - 1);\n//         if (time == 0) {\n//             clearInterval(interval);\n//             setResultTime(true);\n//         }\n//     }, 1000);\n// }, []);\n\n//   const updateVote = (event) => {\n//       setVote({vote: event.target.value});\n//   }\n\n// //   const submitVote = () => {\n// //       let votedPicture = pictures[vote];\n// //       const db = firebase.firestore();\n// //       db.collection(\"rooms\").where(\"code\", \"==\", code).collection(\"rounds\").where(\"round\", \"==\", round).collection(\"pictures\").where(\"dataURL\", \"==\", votedPicture).update({\n// //           votes : firebase.firestore.FieldValue.increment(1)\n// //       }).then(() => {\n// //         db.collection(\"rooms\").where(\"code\", \"==\", code).collection(\"rounds\").where(\"round\", \"==\", round).collection(\"pictures\").where(\"dataURL\", \"==\", votedPicture).get().then((doc) => {\n// //             db.collection(\"rooms\").where(\"code\", \"==\", code).collection(\"players\").where(\"name\", \"==\", doc.data().artist).update({\n// //                 votes : firebase.firestore.FieldValue.increment(1)\n// //             }).then(() => {\n// //                 socket.emit(\"vote\", code);\n// //             });\n// //         });\n// //     });\n// // }\n\n// const getWord = async () => {\n//     const db = firebase.firestore();\n//     db.collection(\"rooms\").where(\"code\", \"==\", code).get().then((querySnapshot) => {\n//       querySnapshot.docs.forEach((snapshot) => {\n//         snapshot.ref.collection(\"rounds\").where(\"round\", \"==\", round).get().then((querySnapshot) => {\n//           querySnapshot.docs.forEach((snapshot) => {\n//               setWord(snapshot.data().word);\n//           });\n//       });\n//   });\n// });\n// }\n\n//   return (\n//     <div>\n//         <h1>{time}</h1>\n//         <h1>{word}</h1>\n//         {pictures.map((idx, picture) => {\n//             return (<div>\n//                         <img src={picture} id={picture}/>\n//                         <label htmlFor={picture}>{idx}</label>\n//                     </div>)\n//                         })}\n//         <input type=\"text\" id=\"vote\" onChange={updateVote} ref={inputRef}/>\n//         <button id=\"done\">Done1</button>\n//         {resultTime ? <Redirect to={{pathname: '/result', state: {code: code, name: name, groupSize: groupSize, round: round}}}/> : null }\n//     </div>\n//     );\n}\n\nexport default Vote;"]},"metadata":{},"sourceType":"module"}